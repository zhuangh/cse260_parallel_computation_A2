// Matrix multiply device code
#include <assert.h>
#include <math.h>
#include "utils.h"
#include "types.h"
using namespace std;

#define VOLV
#define As(i,j) As[i][j]
#define Bs(i,j) Bs[i][j]

__global__ void matMul(int N, _DOUBLE_ *C, _DOUBLE_ *A, _DOUBLE_ *B) {
/*
#ifdef USE_SHARED_UNCOAL
//     int N =  blockDim.y*gridDim.y;


    const unsigned int bx = BLOCKDIM_X, by=BLOCKDIM_Y;
    const unsigned int tx = threadIdx.x , ty = threadIdx.y;
    const unsigned int I = blockIdx.y * by +ty, J = blockIdx.x *bx +tx;
    const unsigned int gx = gridDim.x, gy = gridDim.y;
    __shared__ _DOUBLE_  a[BLOCKDIM_X][BLOCKDIM_Y], b[BLOCKDIM_X][BLOCKDIM_Y];
    if((I<N)&&(J<N)){
	_DOUBLE_ c = 0.0;
	for(unsigned int k = 0 ; k < gy; k++){
	    a[ty][tx] = A[I*N +k*bx + tx];
	    b[ty][tx] = B[J+N*(k*bx+ty)];
	    __syncthreads();
	    for(unsigned int kk = 0; kk<bx; kk++)
		c+=a[ty][kk]*b[kk][tx];
		// may use atomaticadd
	    __syncthreads();
	}
    
    C[I*N+J] = c;
    }
#elif defined VOLV
    
//    cudaDeviceProp props;
   

  */
 
    int block_size = BLOCKDIM_X;
   // int iSizeMultiple = 5; // may use 5 or 10
   // int WA = 4 * block_size;
   // int WB = 4 * block_size;
   //  int wB = WB * iSizeMultiple;
   //  int wA = WA * iSizeMultiple;
    int wA = N;
    int wB = N;
    int bx = blockIdx.x;
    int by = blockIdx.y;

    int tx = threadIdx.x;
    int ty = threadIdx.y;

    const unsigned int BLOCK_SIZE = BLOCKDIM_X;
    
    int BLK_NUM = 1 + N / BLOCKDIM_X ; 

    if( N % BLOCKDIM_X  ==0 ){

	int aBegin = wA * BLOCK_SIZE * by;
	int aEnd = aBegin +wA -1;
	int aStep = BLOCK_SIZE;

	int bBegin = BLOCK_SIZE * bx;
	int bStep = BLOCK_SIZE * wB;


	_DOUBLE_ Csub = 0.;

	for( int a = aBegin, b = bBegin; a <= aEnd ; a+=aStep, b+=bStep){
	    __shared__ _DOUBLE_  As[BLOCK_SIZE][BLOCK_SIZE ];	
	    __shared__ _DOUBLE_  Bs[BLOCK_SIZE][BLOCK_SIZE];	
	    As(ty, tx) = A[a + wA*ty +tx];
	    Bs(ty, tx) = B[b + wB*ty +tx];
	    __syncthreads();
#pragma unroll
	    for (int k = 0 ; k < BLOCK_SIZE ; ++k)
		Csub += As(ty,k) * Bs(k, tx);
	    __syncthreads();

	}
	int c = wB* BLOCK_SIZE * by + BLOCK_SIZE *bx;
	C[c+ wB *ty + tx] =Csub;
    }
    else{ 
	// zhuangh's note:
	// Jin put something below , ensure the odd situation  
	int aBegin = wA * BLOCK_SIZE * by;
	int aEnd = aBegin + wA -1;
	int aStep = BLOCK_SIZE;

	int bBegin = BLOCK_SIZE * bx;
	int bStep = BLOCK_SIZE * wB;

	int BLK_XSZ; 
	int BLK_YSZ ;
	BLK_XSZ =  BLK_YSZ = BLOCK_SIZE ;

	_DOUBLE_ Csub = 0.;

	BLK_XSZ = N - (BLK_NUM-1 ) * BLOCK_SIZE ;
	BLK_YSZ = N - (BLK_NUM-1 ) * BLOCK_SIZE ;

	for( int a = aBegin, b = bBegin; a <= aEnd ; a+=aStep, b+=bStep){

	    __shared__ _DOUBLE_  As[BLOCK_SIZE][BLOCK_SIZE];	
	    __shared__ _DOUBLE_  Bs[BLOCK_SIZE][BLOCK_SIZE];	


	    if( ( aBegin <= (BLK_NUM-2) * BLOCK_SIZE) 
		&& ( bBegin <= (BLK_NUM - 2 )*BLOCK_SIZE  )){        
		As(ty, tx) = A[a + wA*ty +tx];
		Bs(ty, tx) = B[b + wB*ty +tx];

		__syncthreads();
#pragma unroll
		for (int k = 0 ; k < BLOCK_SIZE ; ++k)
		    Csub += As(ty,k) * Bs(k, tx);
		__syncthreads();


	    }
	    else if( aBegin <= (BLK_NUM-2) * BLOCK_SIZE 
		     && bBegin > (BLK_NUM-2) * BLOCK_SIZE ){
		if(tx < BLK_XSZ ){
		    As(ty, tx) = A[a + wA*ty +tx];
		    Bs(ty, tx) = B[b + wB*ty +tx];

		    __syncthreads();
#pragma unroll
		    for (int k = 0 ; k < BLK_XSZ ; ++k)
			Csub += As(ty,k) * Bs(k, tx);
		    __syncthreads();


		}
	    }
	    else if ( aBegin <= (BLK_NUM-2) * BLOCK_SIZE 
		      && bBegin > (BLK_NUM-2) * BLOCK_SIZE ){
		if(ty < BLK_YSZ){
		    As(ty, tx) = A[a + wA*ty +tx];
		    Bs(ty, tx) = B[b + wB*ty +tx];

		    __syncthreads();
#pragma unroll
		    for (int k = 0 ; k < BLOCK_SIZE ; ++k)
			Csub += As(ty,k) * Bs(k, tx);
		    __syncthreads();


		}
	    }
	    else{
		if(ty < BLK_YSZ && tx < BLK_XSZ  ){
		    As(ty, tx) = A[a + wA*ty +tx];
		    Bs(ty, tx) = B[b + wB*ty +tx];

		    __syncthreads();
#pragma unroll
		    for (int k = 0 ; k < BLK_XSZ ; ++k)
			Csub += As(ty,k) * Bs(k, tx);
		    __syncthreads();

		}

	    }

	}

	int c = wB* BLOCK_SIZE * by + BLOCK_SIZE *bx;  // wrong access 
	if(c+ wB *ty + tx < N*N  )
	    C[c+ wB *ty + tx] =Csub;

    }
    // may use atomaticadd
    /*
#else

int I =  blockIdx.x*blockDim.x + threadIdx.x;
int J =  blockIdx.y*blockDim.y + threadIdx.y;

    if((I < N) && (J < N)){
        _DOUBLE_ _c = 0;
        for (unsigned int k = 0; k < N; k++) {
            _DOUBLE_ a = A[I * N + k];
            _DOUBLE_ b = B[k * N + J];
            _c += a * b;
        }
        C[I * N + J] = _c;
    }
#endif
    */
}
